{"version":3,"sources":["Factory/Button/ButtonClass.js","Factory/Input/InputClass.js","Components/Signin/SigninConfig.js","Components/Signin/Signin.js"],"names":["ButtonClass","props","color","variant","type","onClick","style","children","InputClass","input","dynamicInputField","id","label","required","name","value","title","validators","errorMessages","onChange","handleInputChange","username","email","password","confirmPassword","htmlFor","top","gender","length","genders","map","option","key","rows","multiline","formArray","width","marginTop","Signin","state","formData","submitted","handleChange","event","target","setState","handleSubmit","preventDefault","signin","then","history","push","catch","this","authUser","isAuthenticated","form","field","className","onSubmit","disabled","Component","connect"],"mappings":"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","file":"static/js/6.ff05d3bf.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core'\n\nconst ButtonClass = (props) => {\n\n    return (\n        <Button\n            color=\"primary\"\n            variant=\"contained\"\n            type=\"submit\"\n            onClick={props.onClick}\n            style={props.style}\n        >\n            {props.children}\n        </Button>\n    )\n\n}\n\nexport default ButtonClass;","import React from 'react';\nimport {TextField, MenuItem, FormControl, InputLabel } from '@material-ui/core';\nimport { TextValidator, SelectValidator } from 'react-material-ui-form-validator';\n\nconst InputClass = (props) => {\n  const { input } = props;\n  let dynamicInputField = null \n  switch (input.type) {\n    \n    case('title'):\n   \n    dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              value={props.title}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                        />\n    break;\n  \n    case('text'):\n   \n      dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.username}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                          />\n      break;\n\n    case('email'):\n        dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.email}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                            />\n        break;                   \n      \n    case('password'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              value={props.password}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break; \n    case('confirmPassword'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type='password'\n                              value={props.confirmPassword}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break;     \n    case('select'):\n\n        dynamicInputField = <FormControl style={input.style}>\n                              <InputLabel htmlFor=\"input-gende\" style={{top: '-15px'}}>{props.gender.length > 1 ? '' : 'Choose Your Gender'}</InputLabel>\n                              <SelectValidator\n                                value={props.gender || ''}\n                                onChange={props.handleInputChange}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                name={input.name}\n                              >\n                              {\n                                input.genders.map(option => {\n                                  return (\n                                    <MenuItem key={option} value={option}>\n                                      {option}\n                                    </MenuItem>\n                                  )\n                              })}\n                              </SelectValidator>\n                              </FormControl>\n\n\n      break;\n    case('multiline'):\n                 \n      dynamicInputField = <TextField \n                            id={input.id}\n                            label={input.label}\n                            required={input.required}\n                            style={input.style}\n                            name={input.name}\n                            type={input.name}\n                            onChange={props.handleInputChange}\n                            rows={input.rows}\n                            multiline={input.multiline}\n                          />\n\n      break;\n\n    default: \n      return null;\n  }\n\n\n\n  return (\n    <>\n      {dynamicInputField}\n    </>\n  )\n}\n\nexport default InputClass;","const formArray = [\n    {\n      input: {\n        type: 'email',\n        name: 'email',\n        id: 'input-email',\n        label: 'Email',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required', 'isEmail'],\n        errorMessages: ['this field is required', 'email is not valid']\n      }\n    },\n    {\n      input: {\n        type: 'password',\n        name: 'password',\n        id: 'input-password',\n        label: 'password',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required'],\n        errorMessages: ['this field is required']\n      }\n    }\n    \n  ];\n  \n  export default formArray;","import React, { Component } from 'react'\nimport formArray from './SigninConfig';\nimport './Signin.css';\nimport Spinner from '../../Factory/Spinner/Spinner';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport Input from '../../Factory/Input/InputClass';\nimport { connect } from 'react-redux';\n\nimport { signin } from '../../redux/actions/authAction';\n\nclass Signin extends Component {\n\n    componentDidMount() {\n        if (this.props.authUser.isAuthenticated) {\n            this.props.history.push('/');\n        }\n    }\n\n    state = {\n        formData: {\n            email: '',\n            password: ''\n        },\n        submitted: false\n    }\n\n    handleChange = (event) => {\n        const { formData } = this.state; \n        formData[event.target.name] = event.target.value; \n        this.setState({ formData });\n    }\n\n    handleSubmit = (event) => {\n\n        event.preventDefault();\n        this.setState({\n            submitted: true, \n\n        }, () => {\n            this.props.signin(this.state.formData)\n                      .then(() => {\n\n                        this.props.history.push('/');\n\n                      })\n                      .catch(() => {\n                        this.setState({\n                            submitted: false\n                        })\n                      })\n        })\n\n    }\n\n    render() {\n\n        const {submitted} = this.state;\n\n        let form = (\n            formArray.map((field) => {\n                return (\n                    <div key={field.input.label}>\n                        <Input \n                            {...field}\n                            {...this.state.formData}\n                            handleInputChange={this.handleChange}\n                        />\n                    </div>\n                )\n            })\n        )\n\n        return (\n            <ValidatorForm className='Form' onSubmit={this.handleSubmit}>\n               {form}\n\n                <br />\n                <ButtonClass \n                    color='primary'\n                    variant='contained'\n                    type='submit'\n                    disabled={submitted}\n                    >\n                        {\n                            (submitted && 'Your form is submitted')\n                            || (!submitted && 'Submit')\n                        }\n                    </ButtonClass>\n\n            </ValidatorForm>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      authUser: state.authUser\n    }\n  }\n  \nexport default connect(mapStateToProps, { signin })(Signin);"],"sourceRoot":""}