{"version":3,"sources":["Factory/Button/ButtonClass.js","Factory/Input/InputClass.js","redux/actions/talkAction.js","Components/Talk/Talk.js","Components/UserProfileInfo/UserProfileInfoConfig.js","Components/UserProfileInfo/UserProfileInfo.js","Components/AllUserTalk/AllUserTalk.js","Components/UserProfile/UserProfile.js"],"names":["ButtonClass","props","color","variant","type","onClick","style","children","InputClass","input","dynamicInputField","id","label","required","name","value","title","validators","errorMessages","onChange","handleInputChange","username","email","password","confirmPassword","htmlFor","top","gender","length","genders","map","option","key","rows","multiline","handleUserDeleteTalkByID","dispatch","a","Axios","delete","deletedByID","DELETE_USER_TALK_BY_ID","payload","console","log","errorCreateTalk","Promise","reject","getAllUserTalks","get","foundAllUserTalks","GET_ALL_USER_TALKS","data","resolve","createTalk","talkInfo","talkObj","talk","image","post","success","successCreateTalk","getAllTalks","GET_ALL_TALKS","createdTalk","CREATE_TALK","message","ERROR_CREATE_TALK","getTalkByID","foundTalk","GET_TALK_BY_ID","Talk","state","user","className","this","classes","card","media","gutterBottom","component","noWrap","userProfileUrl","size","_id","to","pathname","Component","withStyles","width","padding","height","formArray","marginTop","UserProfileInfo","userData","submitted","event","target","setState","handleSubmit","authUser","onSubmit","UserProfileInfoArray","form","disabled","connect","AllUserTalk","isFetching","then","allUserTalks","catch","error","userTalks","match","url","userTalksGrid","Grid","container","justify","spacing","item","root","Spinner","withRouter","flexGrow","UserProfile"],"mappings":"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","file":"static/js/8.c2b82893.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core'\n\nconst ButtonClass = (props) => {\n\n    return (\n        <Button\n            color=\"primary\"\n            variant=\"contained\"\n            type=\"submit\"\n            onClick={props.onClick}\n            style={props.style}\n        >\n            {props.children}\n        </Button>\n    )\n\n}\n\nexport default ButtonClass;","import React from 'react';\nimport {TextField, MenuItem, FormControl, InputLabel } from '@material-ui/core';\nimport { TextValidator, SelectValidator } from 'react-material-ui-form-validator';\n\nconst InputClass = (props) => {\n  const { input } = props;\n  let dynamicInputField = null \n  switch (input.type) {\n    \n    case('title'):\n   \n    dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              value={props.title}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                        />\n    break;\n  \n    case('text'):\n   \n      dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.username}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                          />\n      break;\n\n    case('email'):\n        dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.email}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                            />\n        break;                   \n      \n    case('password'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              value={props.password}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break; \n    case('confirmPassword'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type='password'\n                              value={props.confirmPassword}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break;     \n    case('select'):\n\n        dynamicInputField = <FormControl style={input.style}>\n                              <InputLabel htmlFor=\"input-gende\" style={{top: '-15px'}}>{props.gender.length > 1 ? '' : 'Choose Your Gender'}</InputLabel>\n                              <SelectValidator\n                                value={props.gender || ''}\n                                onChange={props.handleInputChange}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                name={input.name}\n                              >\n                              {\n                                input.genders.map(option => {\n                                  return (\n                                    <MenuItem key={option} value={option}>\n                                      {option}\n                                    </MenuItem>\n                                  )\n                              })}\n                              </SelectValidator>\n                              </FormControl>\n\n\n      break;\n    case('multiline'):\n                 \n      dynamicInputField = <TextField \n                            id={input.id}\n                            label={input.label}\n                            required={input.required}\n                            style={input.style}\n                            name={input.name}\n                            type={input.name}\n                            onChange={props.handleInputChange}\n                            rows={input.rows}\n                            multiline={input.multiline}\n                          />\n\n      break;\n\n    default: \n      return null;\n  }\n\n\n\n  return (\n    <>\n      {dynamicInputField}\n    </>\n  )\n}\n\nexport default InputClass;","import { CREATE_TALK, ERROR_CREATE_TALK, GET_ALL_TALKS, GET_TALK_BY_ID, GET_ALL_USER_TALKS, DELETE_USER_TALK_BY_ID } from '../actionTypes/actionTypes';\nimport Axios from '../../lib/Axios';\n\n\nexport const handleUserDeleteTalkByID = (id) => async dispatch => {\n  try {\n\n    let deletedByID = await Axios.delete(`/talk/delete-by-id/${id}`);\n\n    dispatch({\n      type: DELETE_USER_TALK_BY_ID,\n      payload: deletedByID,\n      id\n    })\n \n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n}\n\nexport const getAllUserTalks = (id) => async dispatch => {\n\n  try {\n\n    let foundAllUserTalks = await Axios.get(`/talk/get-all-user-talks/${id}`)\n  \n    dispatch({\n      type: GET_ALL_USER_TALKS,\n      payload: foundAllUserTalks.data\n    })\n\n    return Promise.resolve(foundAllUserTalks.data);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n\n}\n\nexport const createTalk = (talkInfo) => async dispatch => {\n\n  let talkObj = {\n    id: talkInfo.id,\n    title: talkInfo.title, \n    talk: talkInfo.talk, \n    image: talkInfo.image\n  }\n\n  try {\n\n    let success = await Axios.post('/talk/create-talk', talkObj)\n\n    dispatch(successCreateTalk(success.data));\n\n    return Promise.resolve(success);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nexport const getAllTalks = () => async dispatch => {\n\n  try {\n\n    let success = await Axios.get(`/talk/get-all-talks`)\n\n    dispatch({\n      type: GET_ALL_TALKS,\n      payload: success.data\n    })\n    return Promise.resolve(success.data)\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nconst successCreateTalk = (createdTalk) => dispatch => {\n  dispatch({\n    type: CREATE_TALK,\n    payload: createdTalk\n  })\n}\n\nconst errorCreateTalk = (message) => dispatch => {\n  dispatch({\n    type: ERROR_CREATE_TALK,\n    payload: message\n  })\n}\n\nexport const getTalkByID = (id) => async dispatch => {\n\n  try {\n    let foundTalk = await Axios.get(`/talk/get-talk-by-id/${id}`)\n\n    dispatch({\n      type: GET_TALK_BY_ID,\n      payload: foundTalk.data\n    });\n\n    return Promise.resolve(foundTalk.data)\n\n  } catch (error) {\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n\n}","import React, { Component } from 'react'\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { Link } from 'react-router-dom';\n\nconst styles = {\n  card: {\n    width: 350,\n    padding: 48\n\n  },\n  media: {\n    height: 350,\n  }\n}\n\nclass Talk extends Component {\n\n  state = {\n    user: true\n  }\n\n  render() {\n\n    return(\n      <Card className={this.props.classes.card}>\n      <CardActionArea>\n        <CardMedia\n          \n          className={this.props.classes.media}\n          image={this.props.image}\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {this.props.title}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" noWrap>\n            {this.props.talk}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n      {\n        !this.props.userProfileUrl ? (\n          <Button size=\"small\" color=\"primary\">\n            <Link\n              to={{\n                pathname: `/see-talk/${this.props._id}`,\n                state: {\n                  id: this.props._id,\n                  title: this.props.title,\n                  talk: this.props.talk,\n                  image: this.props.image\n                }\n              }}\n            >Learn More</Link>\n          </Button>\n        ) : (\n          <Button size=\"small\" color=\"primary\" onClick={() => this.props.handleUserDeleteTalkByID(this.props._id)}>\n            Delete\n          </Button>\n        )\n      }\n      </CardActions>\n    </Card>\n    )\n  }\n}\n\n\n\n\nexport default withStyles(styles)(Talk);\n","const formArray = [\n    {\n      input: {\n        type: 'text',\n        name: 'username',\n        id: 'input-username',\n        label: 'Username',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required'],\n        errorMessages: ['this field is required']\n      }\n    },\n    {\n      input: {\n        type: 'email',\n        name: 'email',\n        id: 'input-email',\n        label: 'Email',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required', 'isEmail'],\n        errorMessages: ['this field is required', 'email is not valid']\n      }\n    },\n    {\n      input: {\n        type: 'password',\n        name: 'password',\n        id: 'input-password',\n        label: 'password',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        }\n      }\n    },\n    {\n      input: {\n        type: 'confirmPassword',\n        name: 'confirmPassword',\n        id: 'input-confirm-password',\n        label: 'confirm-password',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        }\n      }\n    }\n  ];\n  \n  export default formArray;","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport InputClass from '../../Factory/Input/InputClass';\nimport UserProfileInfoArray from './UserProfileInfoConfig';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport Spinner from '../../Factory/Spinner/Spinner'\n\nclass UserProfileInfo extends Component {\n\n  state = {\n    userData: {\n      email: '',\n      username: '',\n      password: '',\n      confirmPassword: ''\n    },\n    submitted: false,\n  }\n\n  componentDidMount() {\n    this.setState({\n      userData: {\n        email: this.props.authUser.user.email,\n        username: this.props.authUser.user.username,\n        password: '',\n        confirmPassword: ''\n      }\n    })\n  }\n\n  handleInputChange = (event) => {\n    const { userData } = this.state;\n    userData[event.target.name] = event.target.value;\n    this.setState({ userData });\n  }\n\n  handleSubmit = (event) => {\n\n  }\n\n  render() {\n\n    const {submitted} = this.state;\n\n    return (\n      <ValidatorForm className='Form' onSubmit={this.handleSubmit}>\n        {\n          UserProfileInfoArray.map((form) => {\n            return (\n              <div key={form.input.label}>\n                <InputClass \n                  {...form}\n                  {...this.state.userData}\n                  handleInputChange={this.handleInputChange}\n                />\n              </div>\n            )\n          })\n        }\n\n        <br />\n        <br />\n\n        <ButtonClass \n          color=\"primary\"\n          variant=\"contained\"\n          type=\"submit\"\n          disabled={submitted}\n          > \n          {\n              (submitted && 'Profile Updated')\n              || (!submitted && 'Update Profile')\n          }\n        </ButtonClass>\n      </ValidatorForm>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    authUser: state.authUser\n  };\n};\n\nexport default connect(mapStateToProps, null)(UserProfileInfo);\n","import React, { Component } from 'react'\nimport Talk from '../Talk/Talk'\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom'\nimport {getAllUserTalks, handleUserDeleteTalkByID} from '../../redux/actions/talkAction';\nimport Spinner from '../../Factory/Spinner/Spinner'\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n    marginTop: 15,\n  }\n}\n\nclass AllUserTalk extends Component {\n\n\n  state = {\n    isFetching: false,\n  }\n\n  componentDidMount() {\n\n    this.setState({\n      isFetching: true\n    })\n\n    this.props.getAllUserTalks(this.props.authUser.user.id)\n        .then( allUserTalks => {\n  \n          this.setState({\n            isFetching: false\n          })\n        })\n        .catch(error => {\n          this.setState({\n            isFetching: false\n          })\n          console.log(error)\n        })\n  }\n\n\n  render() {\n\n    const { userTalks } = this.props.talk; \n\n    const userProfileUrl = this.props.match.url;\n\n    let userTalksGrid = (\n      <Grid container justify=\"center\"  spacing={1}>\n      {\n        userTalks.map((talk) => {\n          return (\n            <Grid key={talk._id}  item>\n              <Talk {...talk} \n                userProfileUrl={userProfileUrl}\n                handleUserDeleteTalkByID={this.props.handleUserDeleteTalkByID}\n                />\n            </Grid>\n             )\n            })\n          }\n      </Grid>\n    )\n\n    return (\n      <div className={this.props.classes.root}>\n          {this.state.isFetching ? <Spinner /> : userTalksGrid}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    talk: state.talk,\n    authUser: state.authUser\n  }\n}\n\nexport default connect(mapStateToProps, { getAllUserTalks, handleUserDeleteTalkByID })(withRouter(withStyles(styles)(AllUserTalk)));","import React, { Component } from 'react'\nimport UserProfileInfo from '../UserProfileInfo/UserProfileInfo'\nimport AllUserTalk from '../AllUserTalk/AllUserTalk';\n\nexport default class UserProfile extends Component {\n    render() {\n        return (\n            <div className='App'>\n                <UserProfileInfo />\n\n                <br />\n                <hr style={{width: '50%'}} />\n                \n                <AllUserTalk />\n            </div>\n        )\n    }\n}\n"],"sourceRoot":""}