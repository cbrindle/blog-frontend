{"version":3,"sources":["Factory/Button/ButtonClass.js","Factory/Input/InputClass.js","redux/actions/talkAction.js","Components/CreateTalk/CreateTalkConfig.js","Components/CreateTalk/CreateTalk.js"],"names":["ButtonClass","props","color","variant","type","onClick","style","children","InputClass","input","dynamicInputField","id","label","required","name","value","title","validators","errorMessages","onChange","handleInputChange","username","email","password","confirmPassword","htmlFor","top","gender","length","genders","map","option","key","rows","multiline","handleUserDeleteTalkByID","dispatch","a","Axios","delete","deletedByID","DELETE_USER_TALK_BY_ID","payload","console","log","errorCreateTalk","Promise","reject","getAllUserTalks","get","foundAllUserTalks","GET_ALL_USER_TALKS","data","resolve","createTalk","talkInfo","talkObj","talk","image","post","success","successCreateTalk","getAllTalks","GET_ALL_TALKS","createdTalk","CREATE_TALK","message","ERROR_CREATE_TALK","getTalkByID","foundTalk","GET_TALK_BY_ID","formArray","width","marginTop","CreateTalk","state","formData","submitted","uploadPictureToggle","uploadWidget","window","cloudinary","openUploadWidget","cloud_name","upload_preset","tags","error","result","event","info","secure_url","setState","successfullyCreatedTalk","handleSubmit","preventDefault","newUserObj","Object","assign","authUser","user","then","history","push","catch","handleChange","target","this","form","field","index","className","onSubmit","Spinner","height","margin","disabled","Component","connect"],"mappings":"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","file":"static/js/9.ef0cc19f.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core'\n\nconst ButtonClass = (props) => {\n\n    return (\n        <Button\n            color=\"primary\"\n            variant=\"contained\"\n            type=\"submit\"\n            onClick={props.onClick}\n            style={props.style}\n        >\n            {props.children}\n        </Button>\n    )\n\n}\n\nexport default ButtonClass;","import React from 'react';\nimport {TextField, MenuItem, FormControl, InputLabel } from '@material-ui/core';\nimport { TextValidator, SelectValidator } from 'react-material-ui-form-validator';\n\nconst InputClass = (props) => {\n  const { input } = props;\n  let dynamicInputField = null \n  switch (input.type) {\n    \n    case('title'):\n   \n    dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              value={props.title}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                        />\n    break;\n  \n    case('text'):\n   \n      dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.username}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                          />\n      break;\n\n    case('email'):\n        dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.email}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                            />\n        break;                   \n      \n    case('password'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              value={props.password}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break; \n    case('confirmPassword'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type='password'\n                              value={props.confirmPassword}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break;     \n    case('select'):\n\n        dynamicInputField = <FormControl style={input.style}>\n                              <InputLabel htmlFor=\"input-gende\" style={{top: '-15px'}}>{props.gender.length > 1 ? '' : 'Choose Your Gender'}</InputLabel>\n                              <SelectValidator\n                                value={props.gender || ''}\n                                onChange={props.handleInputChange}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                name={input.name}\n                              >\n                              {\n                                input.genders.map(option => {\n                                  return (\n                                    <MenuItem key={option} value={option}>\n                                      {option}\n                                    </MenuItem>\n                                  )\n                              })}\n                              </SelectValidator>\n                              </FormControl>\n\n\n      break;\n    case('multiline'):\n                 \n      dynamicInputField = <TextField \n                            id={input.id}\n                            label={input.label}\n                            required={input.required}\n                            style={input.style}\n                            name={input.name}\n                            type={input.name}\n                            onChange={props.handleInputChange}\n                            rows={input.rows}\n                            multiline={input.multiline}\n                          />\n\n      break;\n\n    default: \n      return null;\n  }\n\n\n\n  return (\n    <>\n      {dynamicInputField}\n    </>\n  )\n}\n\nexport default InputClass;","import { CREATE_TALK, ERROR_CREATE_TALK, GET_ALL_TALKS, GET_TALK_BY_ID, GET_ALL_USER_TALKS, DELETE_USER_TALK_BY_ID } from '../actionTypes/actionTypes';\nimport Axios from '../../lib/Axios';\n\n\nexport const handleUserDeleteTalkByID = (id) => async dispatch => {\n  try {\n\n    let deletedByID = await Axios.delete(`/talk/delete-by-id/${id}`);\n\n    dispatch({\n      type: DELETE_USER_TALK_BY_ID,\n      payload: deletedByID,\n      id\n    })\n \n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n}\n\nexport const getAllUserTalks = (id) => async dispatch => {\n\n  try {\n\n    let foundAllUserTalks = await Axios.get(`/talk/get-all-user-talks/${id}`)\n  \n    dispatch({\n      type: GET_ALL_USER_TALKS,\n      payload: foundAllUserTalks.data\n    })\n\n    return Promise.resolve(foundAllUserTalks.data);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n\n}\n\nexport const createTalk = (talkInfo) => async dispatch => {\n\n  let talkObj = {\n    id: talkInfo.id,\n    title: talkInfo.title, \n    talk: talkInfo.talk, \n    image: talkInfo.image\n  }\n\n  try {\n\n    let success = await Axios.post('/talk/create-talk', talkObj)\n\n    dispatch(successCreateTalk(success.data));\n\n    return Promise.resolve(success);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nexport const getAllTalks = () => async dispatch => {\n\n  try {\n\n    let success = await Axios.get(`/talk/get-all-talks`)\n\n    dispatch({\n      type: GET_ALL_TALKS,\n      payload: success.data\n    })\n    return Promise.resolve(success.data)\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nconst successCreateTalk = (createdTalk) => dispatch => {\n  dispatch({\n    type: CREATE_TALK,\n    payload: createdTalk\n  })\n}\n\nconst errorCreateTalk = (message) => dispatch => {\n  dispatch({\n    type: ERROR_CREATE_TALK,\n    payload: message\n  })\n}\n\nexport const getTalkByID = (id) => async dispatch => {\n\n  try {\n    let foundTalk = await Axios.get(`/talk/get-talk-by-id/${id}`)\n\n    dispatch({\n      type: GET_TALK_BY_ID,\n      payload: foundTalk.data\n    });\n\n    return Promise.resolve(foundTalk.data)\n\n  } catch (error) {\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n\n}","const formArray = [\n    {\n      input: {\n        type: 'title',\n        name: 'title',\n        id: 'input-title',\n        label: 'Title',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required'],\n        errorMessages: ['this field is required']\n      }\n    },\n    {\n      input: {\n        type: 'multiline',\n        name: 'talk',\n        id: 'input-multiline',\n        label: 'Create Your Talk',\n        multiline: true,\n        required: true,\n        rows: 5,\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required'],\n        errorMessages: ['this field is required']\n      }\n    }\n  ];\n  \n  export default formArray;","import React, { Component } from 'react'\nimport ButtonClass from '../../Factory/Button/ButtonClass'\nimport formArray from './CreateTalkConfig';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport Input from '../../Factory/Input/InputClass';\nimport Spinner from '../../Factory/Spinner/Spinner';\nimport { connect } from 'react-redux';\nimport { createTalk } from '../../redux/actions/talkAction';\n\nclass CreateTalk extends Component {\n\n  state = {\n    formData: {\n      title: '',\n      talk: '',\n      image: ''\n    },\n    submitted: false,\n    uploadPictureToggle: false\n  }\n  \n  uploadWidget = () => {\n\n    window.cloudinary.openUploadWidget({ cloud_name: 'dy6xduf53', upload_preset: 'gxaofwpa', tags:['hamster']},\n    (error, result)  => {\n        if (error) {\n          console.log(error)\n        } else {\n          \n          if (result.event === 'success') {\n            console.log(result.info.secure_url)\n            const { formData } = this.state;\n            formData['image'] = result.info.secure_url\n            this.setState({\n              ...this.state, \n              formData, \n\n            })\n          }\n\n        }\n    });\n  }\n\n  successfullyCreatedTalk = () => {\n    this.setState({\n      submitted: false,\n      formData: {\n        email: '',\n        password: ''\n      }\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    this.setState({\n      submitted: true\n    }, () => {\n\n      let newUserObj = Object.assign({}, this.state.formData);\n    \n      newUserObj.id = this.props.authUser.user.id\n\n  \n      this.props.createTalk(newUserObj)\n                .then(() => {\n                  this.successfullyCreatedTalk();\n                  this.props.history.push('/')\n                })\n                .catch(error => {\n                  console.log(error);\n                  this.setState({\n                    submitted: false\n                  })\n                })\n\n    });\n\n\n\n  }\n\n  handleChange = (event) => {\n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    this.setState({ formData });\n  }\n\n  render() {\n\n    const {submitted} = this.state;\n\n    let form = (\n      formArray.map((field, index) => {\n          \n        return (\n          <div key={field.input.label}>\n              <Input \n                {...field}\n                {...this.state.formData}\n                handleInputChange={this.handleChange}\n              />\n              <br />\n          </div>\n        )\n      })\n    ) \n\n    return (\n      <div className='App'>\n\n     <ValidatorForm className='Form' onSubmit={this.handleSubmit}>\n            {\n                submitted ? <Spinner /> : form\n            }\n            <br />\n            <div style={{height: '25px',margin: '25px 20px'}}></div>\n\n\n         \n\n            <div style={{height: '25px',margin: '20px 20px'}}></div>\n            <ButtonClass \n              color=\"primary\"\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={submitted}\n              > \n              {\n                  (submitted && 'Your form is submitted!')\n                  || (!submitted && 'Submit')\n              }\n            </ButtonClass>\n            \n          </ValidatorForm>\n\n          <ButtonClass \n              onClick={this.uploadWidget}\n              color=\"primary\"\n              variant=\"outlined\"\n              type=\"submit\"\n              style={{top: '-110px'}}\n              >\n                Add Image\n           </ButtonClass>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    authUser: state.authUser\n  };\n};\n\nexport default connect(mapStateToProps, { createTalk })(CreateTalk)"],"sourceRoot":""}