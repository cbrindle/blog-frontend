{"version":3,"sources":["Factory/Button/ButtonClass.js","Factory/Input/InputClass.js","Components/Signup/SignupConfig.js","Factory/MessageBar/MessageBar.js","Components/Signup/Signup.js"],"names":["ButtonClass","props","color","variant","type","onClick","style","children","InputClass","input","dynamicInputField","id","label","required","name","value","title","validators","errorMessages","onChange","handleInputChange","username","email","password","confirmPassword","htmlFor","top","gender","length","genders","map","option","key","rows","multiline","formArray","width","marginTop","select","helperText","MessageBar","className","dynamicClassName","fontColorStyle","Signup","state","formData","submitted","redirectToggle","countdownSecond","handleChange","event","target","setState","successfullySignedUp","countDownRedirect","count","countDownTimer","setInterval","this","clearInterval","history","push","bind","handleSubmit","preventDefault","signup","then","catch","error","authUser","isAuthenticated","ValidatorForm","addValidationRule","form","field","index","message","serverMessage","messageStyle","onSubmit","Spinner","disabled","Component","connect","authUserSuccessful"],"mappings":"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","file":"static/js/7.ab55c21f.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core'\n\nconst ButtonClass = (props) => {\n\n    return (\n        <Button\n            color=\"primary\"\n            variant=\"contained\"\n            type=\"submit\"\n            onClick={props.onClick}\n            style={props.style}\n        >\n            {props.children}\n        </Button>\n    )\n\n}\n\nexport default ButtonClass;","import React from 'react';\nimport {TextField, MenuItem, FormControl, InputLabel } from '@material-ui/core';\nimport { TextValidator, SelectValidator } from 'react-material-ui-form-validator';\n\nconst InputClass = (props) => {\n  const { input } = props;\n  let dynamicInputField = null \n  switch (input.type) {\n    \n    case('title'):\n   \n    dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              value={props.title}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                        />\n    break;\n  \n    case('text'):\n   \n      dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.username}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                          />\n      break;\n\n    case('email'):\n        dynamicInputField = <TextValidator \n                                id={input.id}\n                                label={input.label}\n                                required={input.required}\n                                style={input.style}\n                                name={input.name}\n                                type={input.type}\n                                value={props.email}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                onChange={props.handleInputChange}\n                            />\n        break;                   \n      \n    case('password'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type={input.type}\n                              value={props.password}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break; \n    case('confirmPassword'):\n        dynamicInputField = <TextValidator \n                              id={input.id}\n                              label={input.label}\n                              required={input.required}\n                              style={input.style}\n                              name={input.name}\n                              type='password'\n                              value={props.confirmPassword}\n                              validators={input.validators}\n                              errorMessages={input.errorMessages}\n                              onChange={props.handleInputChange}\n                            />\n        break;     \n    case('select'):\n\n        dynamicInputField = <FormControl style={input.style}>\n                              <InputLabel htmlFor=\"input-gende\" style={{top: '-15px'}}>{props.gender.length > 1 ? '' : 'Choose Your Gender'}</InputLabel>\n                              <SelectValidator\n                                value={props.gender || ''}\n                                onChange={props.handleInputChange}\n                                validators={input.validators}\n                                errorMessages={input.errorMessages}\n                                name={input.name}\n                              >\n                              {\n                                input.genders.map(option => {\n                                  return (\n                                    <MenuItem key={option} value={option}>\n                                      {option}\n                                    </MenuItem>\n                                  )\n                              })}\n                              </SelectValidator>\n                              </FormControl>\n\n\n      break;\n    case('multiline'):\n                 \n      dynamicInputField = <TextField \n                            id={input.id}\n                            label={input.label}\n                            required={input.required}\n                            style={input.style}\n                            name={input.name}\n                            type={input.name}\n                            onChange={props.handleInputChange}\n                            rows={input.rows}\n                            multiline={input.multiline}\n                          />\n\n      break;\n\n    default: \n      return null;\n  }\n\n\n\n  return (\n    <>\n      {dynamicInputField}\n    </>\n  )\n}\n\nexport default InputClass;","const formArray = [\n    {\n      input: {\n        type: 'text',\n        name: 'username',\n        id: 'input-username',\n        label: 'Username',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required'],\n        errorMessages: ['this field is required']\n      }\n    },\n    {\n      input: {\n        type: 'email',\n        name: 'email',\n        id: 'input-email',\n        label: 'Email',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required', 'isEmail'],\n        errorMessages: ['this field is required', 'email is not valid']\n      }\n    },\n    {\n      input: {\n        type: 'password',\n        name: 'password',\n        id: 'input-password',\n        label: 'password',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required'],\n        errorMessages: ['this field is required']\n      }\n    },\n    {\n      input: {\n        type: 'confirmPassword',\n        name: 'confirmPassword',\n        id: 'input-confirm-password',\n        label: 'confirm-password',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['isPasswordMatch', 'required'],\n        errorMessages: ['password mismatch', 'this field is required']\n      }\n    },\n    {\n      input: {\n        type: 'select',\n        name: 'gender',\n        id: 'input-gender',\n        label: 'Select',\n        select: true,\n        required: true,\n        genders: ['male', 'female', 'undefined'],\n        helperText: 'Please select your gender',\n        style: {\n          width: '250px',\n          marginTop: '15px'\n        },\n        validators: ['required'],\n        errorMessages: ['this field is required']\n      }\n    }\n  ];\n  \n  export default formArray;","import React from 'react';\n\nconst MessageBar = (props) => {\n    return (\n        <h3 className={props.dynamicClassName}\n            style={{color: props.fontColorStyle}}\n        >{props.children}</h3>\n    )\n}\n\nexport default MessageBar;","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\n\nimport './Signup.css';\nimport Input from '../../Factory/Input/InputClass'\nimport ButtonClass from '../../Factory/Button/ButtonClass';\nimport { ValidatorForm } from 'react-material-ui-form-validator';\nimport formArray from './SignupConfig';\nimport { authUserSuccessful, \n         signup } from '../../redux/actions/authAction';\nimport Spinner from '../../Factory/Spinner/Spinner';\nimport MessageBar from '../../Factory/MessageBar/MessageBar';\n\nclass Signup extends Component {\n\n  state = {\n    formData: {\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      gender: ''\n    },\n    submitted: false,\n    redirectToggle: false, \n    countdownSecond: ''\n  }\n\n  componentDidMount() {\n\n    if (this.props.authUser.isAuthenticated) {\n      this.props.history.push('/');\n   }\n    // custom rule will have name 'isPasswordMatch'\n    ValidatorForm.addValidationRule('isPasswordMatch', (value) => {\n        const { formData } = this.state;\n        if (value !== formData.password) {\n            return false;\n        }\n        return true;\n    });\n  }\n\n\n  handleChange = (event) => {\n    const { formData } = this.state;\n    formData[event.target.name] = event.target.value;\n    this.setState({ formData });\n  }\n\n\n  successfullySignedUp = () => {\n    this.setState({\n      submitted: false,\n      formData: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        gender: ''\n      }\n    })\n  }\n\n  countDownRedirect = () => {\n    let count = 4;\n    let countDownTimer = setInterval(function() {\n      count -= 1; \n      this.setState({\n        countdownSecond: count\n      })\n\n      if (count === 0) {\n        clearInterval(countDownTimer);\n        this.props.history.push('/sign-in')\n      }\n    }.bind(this), 750)\n  }\n\n  handleSubmit = (event) => {\n\n      event.preventDefault();\n\n      this.setState({ \n          submitted: true, \n        }, () => {\n\n            this.props.signup(this.state.formData)\n                .then(() => {\n                  this.successfullySignedUp();\n\n                  this.setState({\n                    redirectToggle: true\n                  })\n\n                  this.countDownRedirect()\n\n                })\n                .catch(error => {\n\n                  this.setState({\n                    submitted: false\n                  })\n\n                });\n\n            //this.props.history.push('/')\n\n      });\n  }\n\n  render() {\n    \n    const {submitted} = this.state;\n\n    let form = (\n      formArray.map((field, index) => {\n          \n        return (\n          <div key={field.input.label}>\n              <Input \n                {...field}\n                {...this.state.formData}\n                handleInputChange={this.handleChange}\n              />\n              <br />\n          </div>\n        )\n      })\n    )\n      \n    return (\n      <>\n          {this.props.message.serverMessage !== null ? <MessageBar \n                                                        fontColorStyle={this.props.message.messageStyle.fontColorStyle}\n                                                        dynamicClassName={this.props.message.messageStyle.dynamicClassName}\n                                                        >{this.props.message.serverMessage} {this.state.redirectToggle ? `Redirecting in ${this.state.countdownSecond}` : ''}</MessageBar> : ''}\n          <ValidatorForm className='Form' onSubmit={this.handleSubmit}>\n            {\n                submitted ? <Spinner /> : form\n            }\n            <br />\n            \n            <ButtonClass \n              color=\"primary\"\n              variant=\"contained\"\n              type=\"submit\"\n              disabled={submitted}\n              > \n              {\n                  (submitted && 'Your form is submitted!')\n                  || (!submitted && 'Submit')\n              }\n            </ButtonClass>\n      \n        </ValidatorForm>\n\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    message: state.message,\n    authUser: state.authUser\n  }\n}\n\nexport default connect(mapStateToProps, { authUserSuccessful, signup })(Signup)"],"sourceRoot":""}