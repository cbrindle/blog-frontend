{"version":3,"sources":["redux/actions/talkAction.js","Components/SeeTalk/SeeTalk.js"],"names":["handleUserDeleteTalkByID","id","dispatch","a","Axios","delete","deletedByID","type","DELETE_USER_TALK_BY_ID","payload","console","log","errorCreateTalk","Promise","reject","getAllUserTalks","get","foundAllUserTalks","GET_ALL_USER_TALKS","data","resolve","createTalk","talkInfo","talkObj","title","talk","image","post","success","successCreateTalk","getAllTalks","GET_ALL_TALKS","createdTalk","CREATE_TALK","message","ERROR_CREATE_TALK","getTalkByID","foundTalk","GET_TALK_BY_ID","SeeTalk","state","isFetching","this","props","location","undefined","setState","match","params","then","catch","error","className","src","alt","Component","connect"],"mappings":"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","file":"static/js/11.fc3f808c.chunk.js","sourcesContent":["import { CREATE_TALK, ERROR_CREATE_TALK, GET_ALL_TALKS, GET_TALK_BY_ID, GET_ALL_USER_TALKS, DELETE_USER_TALK_BY_ID } from '../actionTypes/actionTypes';\nimport Axios from '../../lib/Axios';\n\n\nexport const handleUserDeleteTalkByID = (id) => async dispatch => {\n  try {\n\n    let deletedByID = await Axios.delete(`/talk/delete-by-id/${id}`);\n\n    dispatch({\n      type: DELETE_USER_TALK_BY_ID,\n      payload: deletedByID,\n      id\n    })\n \n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n}\n\nexport const getAllUserTalks = (id) => async dispatch => {\n\n  try {\n\n    let foundAllUserTalks = await Axios.get(`/talk/get-all-user-talks/${id}`)\n  \n    dispatch({\n      type: GET_ALL_USER_TALKS,\n      payload: foundAllUserTalks.data\n    })\n\n    return Promise.resolve(foundAllUserTalks.data);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n\n}\n\nexport const createTalk = (talkInfo) => async dispatch => {\n\n  let talkObj = {\n    id: talkInfo.id,\n    title: talkInfo.title, \n    talk: talkInfo.talk, \n    image: talkInfo.image\n  }\n\n  try {\n\n    let success = await Axios.post('/talk/create-talk', talkObj)\n\n    dispatch(successCreateTalk(success.data));\n\n    return Promise.resolve(success);\n\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nexport const getAllTalks = () => async dispatch => {\n\n  try {\n\n    let success = await Axios.get(`/talk/get-all-talks`)\n\n    dispatch({\n      type: GET_ALL_TALKS,\n      payload: success.data\n    })\n    return Promise.resolve(success.data)\n  } catch (error) {\n    console.log(error)\n    dispatch(errorCreateTalk(error))\n    return Promise.reject(error);\n  }\n\n}\n\nconst successCreateTalk = (createdTalk) => dispatch => {\n  dispatch({\n    type: CREATE_TALK,\n    payload: createdTalk\n  })\n}\n\nconst errorCreateTalk = (message) => dispatch => {\n  dispatch({\n    type: ERROR_CREATE_TALK,\n    payload: message\n  })\n}\n\nexport const getTalkByID = (id) => async dispatch => {\n\n  try {\n    let foundTalk = await Axios.get(`/talk/get-talk-by-id/${id}`)\n\n    dispatch({\n      type: GET_TALK_BY_ID,\n      payload: foundTalk.data\n    });\n\n    return Promise.resolve(foundTalk.data)\n\n  } catch (error) {\n    dispatch(errorCreateTalk(error));\n    return Promise.reject(error);\n  }\n\n}","import React, { Component } from 'react'\nimport Spinner from '../../Factory/Spinner/Spinner';\nimport { connect } from 'react-redux';\nimport { getTalkByID } from '../../redux/actions/talkAction';\n\nclass SeeTalk extends Component {\n\n    state = {\n        title: '',\n        image: '',\n        talk: '',\n        isFetching: false\n    }\n\n    componentDidMount() {\n        console.log(this.props.location)\n        if (this.props.location.state !== undefined) {\n            this.setState({\n                title: this.props.location.state.title,\n                image: this.props.location.state.image,\n                talk: this.props.location.state.talk\n            })\n        } else {\n            this.setState({\n                isFetching: true\n            })\n            this.props.getTalkByID(this.props.match.params.id)\n                .then( talk => {\n\n                    this.setState({\n                        title: talk.title, \n                        image: talk.image, \n                        talk: talk.talk, \n                        isFetching: false\n                    })\n                })  \n                .catch( error => {\n                    this.setState({\n                        isFetching: false\n                    })\n                    console.log(error);\n                })\n        }\n    }\n    render() {\n        let talkInfo = (\n            <div className='App'>\n                <h1>title {this.state.title}</h1>\n                <div><img src={this.state.image} alt=\"hamster\"/></div>\n                <p>{this.state.talk}</p>\n            </div>\n        )\n        return (\n           this.state.isFetching ? <Spinner /> : talkInfo\n        )\n    }\n}\n\nexport default connect(null, {getTalkByID})(SeeTalk);"],"sourceRoot":""}